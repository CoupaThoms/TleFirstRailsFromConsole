
[1mFrom:[0m /home/snake/.rbenv/versions/2.5.1/lib/ruby/gems/2.5.0/gems/activerecord-5.2.1/lib/active_record/core.rb @ line 159 ActiveRecord::Core::ClassMethods#find:

    [1;34m157[0m: [32mdef[0m [1;34mfind[0m(*ids) [1;34m# :nodoc:[0m
    [1;34m158[0m:   [1;34m# We don't have cache keys for this stuff yet[0m
 => [1;34m159[0m:   [32mreturn[0m [32msuper[0m [32munless[0m ids.length == [1;34m1[0m
    [1;34m160[0m:   [32mreturn[0m [32msuper[0m [32mif[0m block_given? ||
    [1;34m161[0m:                   primary_key.nil? ||
    [1;34m162[0m:                   scope_attributes? ||
    [1;34m163[0m:                   columns_hash.include?(inheritance_column)
    [1;34m164[0m: 
    [1;34m165[0m:   id = ids.first
    [1;34m166[0m: 
    [1;34m167[0m:   [32mreturn[0m [32msuper[0m [32mif[0m [1;34;4mStatementCache[0m.unsupported_value?(id)
    [1;34m168[0m: 
    [1;34m169[0m:   key = primary_key
    [1;34m170[0m: 
    [1;34m171[0m:   statement = cached_find_by_statement(key) { |params|
    [1;34m172[0m:     where(key => params.bind).limit([1;34m1[0m)
    [1;34m173[0m:   }
    [1;34m174[0m: 
    [1;34m175[0m:   record = statement.execute([id], connection).first
    [1;34m176[0m:   [32munless[0m record
    [1;34m177[0m:     raise [1;34;4mRecordNotFound[0m.new([31m[1;31m"[0m[31mCouldn't find #{name}[0m[31m with '#{primary_key}[0m[31m'=#{id}[0m[31m[1;31m"[0m[31m[0m,
    [1;34m178[0m:                              name, primary_key, id)
    [1;34m179[0m:   [32mend[0m
    [1;34m180[0m:   record
    [1;34m181[0m: [32mrescue[0m ::[1;34;4mRangeError[0m
    [1;34m182[0m:   raise [1;34;4mRecordNotFound[0m.new([31m[1;31m"[0m[31mCouldn't find #{name}[0m[31m with an out of range value for '#{primary_key}[0m[31m'[1;31m"[0m[31m[0m,
    [1;34m183[0m:                            name, primary_key)
    [1;34m184[0m: [32mend[0m

